import re
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from database import set_city, set_notify_times, get_user_settings
from weather_api import get_current_weather, get_forecast_5days
from scheduler import scheduler, send_daily_weather

router = Router()

# –°—Ç–∞–Ω–∏ FSM
class CityState(StatesGroup):
    waiting_for_city = State()

class NotifyTimeState(StatesGroup):
    waiting_for_times = State()

# –ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
def main_menu_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üå¶ –î—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É", callback_data="menu_weather")],
        [InlineKeyboardButton(text="üèô –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –º—ñ—Å—Ç–æ", callback_data="menu_set_city")],
        [InlineKeyboardButton(text="‚è∞ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è", callback_data="menu_set_notify")]
    ])
    return kb

def weather_menu_keyboard() -> InlineKeyboardMarkup:
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üå§ –ü–æ–≥–æ–¥–∞ –∑–∞—Ä–∞–∑", callback_data="weather_current"),
         InlineKeyboardButton(text="üìÖ –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤", callback_data="weather_5days")],
        [InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ])
    return kb

# –û–±—Ä–æ–±–Ω–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    welcome_text = (
        "üëã *–í—ñ—Ç–∞—é!*\n\n"
        "–Ø ‚Äî –≤–∞—à –ø–æ–≥–æ–¥–Ω–∏–π –±–æ—Ç, —è–∫–∏–π –¥–æ–ø–æ–º–æ–∂–µ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ—Ç–æ—á–Ω—É –ø–æ–≥–æ–¥—É üå§ "
        "—ñ –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 5 –¥–Ω—ñ–≤ üìÖ.\n\n"
        "–¢–∞–∫–æ–∂ –º–æ–∂—É –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω—ñ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –ø–æ–≥–æ–¥—É ‚è∞.\n\n"
        "–û–±–µ—Ä—ñ—Ç—å, —â–æ —Ö–æ—á–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏:"
    )
    await message.answer(welcome_text, reply_markup=main_menu_keyboard())

@router.callback_query(F.data == "back_to_main")
async def callback_main_menu(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.edit_text("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu_keyboard())

@router.callback_query(F.data == "menu_weather")
async def callback_menu_weather(call: CallbackQuery):
    await call.message.edit_text("–û–±–µ—Ä—ñ—Ç—å, —è–∫—É –ø–æ–≥–æ–¥—É –ø–æ–∫–∞–∑–∞—Ç–∏:", reply_markup=weather_menu_keyboard())

@router.callback_query(F.data == "menu_set_city")
async def callback_menu_set_city(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ö–∏—ó–≤, –û—Ö—Ç–∏—Ä–∫–∞, –£–∂–≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ –∫–æ–º—É).")
    await state.set_state(CityState.waiting_for_city)

@router.callback_query(F.data == "menu_set_notify")
async def callback_menu_set_notify(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í–∫–∞–∂—ñ—Ç—å —á–∞—Å–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM —á–µ—Ä–µ–∑ –∫–æ–º—É (24-–≥–æ–¥–∏–Ω–Ω–∏–π). –ü—Ä–∏–∫–ª–∞–¥: 15:00, 18:00")
    await state.set_state(NotifyTimeState.waiting_for_times)

@router.callback_query(F.data == "weather_current")
async def callback_weather_current(call: CallbackQuery):
    user_id = call.from_user.id
    city, _ = get_user_settings(user_id)
    if not city:
        await call.message.edit_text("–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –º—ñ—Å—Ç–æ!", reply_markup=main_menu_keyboard())
        return
    # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –∫—ñ–ª—å–∫–∞ –º—ñ—Å—Ç, —è–∫—â–æ –≤–≤–µ–¥–µ–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º—É
    cities = [c.strip() for c in city.split(",") if c.strip()]
    weather_texts = []
    for c in cities:
        if c:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º—ñ—Å—Ç–æ –Ω–µ –ø–æ—Ä–æ–∂–Ω—î
            weather_text = await get_current_weather(c)
            weather_texts.append(weather_text)
    if weather_texts:
        await call.message.edit_text("\n\n".join(weather_texts), parse_mode="Markdown", reply_markup=weather_menu_keyboard())
    else:
        await call.message.edit_text("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–æ–≥–æ–¥—É. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç!", reply_markup=weather_menu_keyboard())

@router.callback_query(F.data == "weather_5days")
async def callback_weather_5days(call: CallbackQuery):
    user_id = call.from_user.id
    city, _ = get_user_settings(user_id)
    if not city:
        await call.message.edit_text("–°–ø–æ—á–∞—Ç–∫—É –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –º—ñ—Å—Ç–æ!", reply_markup=main_menu_keyboard())
        return
    # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –∫—ñ–ª—å–∫–∞ –º—ñ—Å—Ç, —è–∫—â–æ –≤–≤–µ–¥–µ–Ω–æ —á–µ—Ä–µ–∑ –∫–æ–º—É
    cities = [c.strip() for c in city.split(",") if c.strip()]
    forecast_texts = []
    for c in cities:
        if c:  # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –º—ñ—Å—Ç–æ –Ω–µ –ø–æ—Ä–æ–∂–Ω—î
            forecast_text = await get_forecast_5days(c)
            forecast_texts.append(forecast_text)
    if forecast_texts:
        await call.message.edit_text("\n\n".join(forecast_texts), parse_mode="Markdown", reply_markup=weather_menu_keyboard())
    else:
        await call.message.edit_text("–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø—Ä–æ–≥–Ω–æ–∑. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–∑–≤–∏ –º—ñ—Å—Ç!", reply_markup=weather_menu_keyboard())

@router.message(CityState.waiting_for_city)
async def city_input(message: Message, state: FSMContext):
    cities = [c.strip() for c in message.text.split(",") if c.strip()]
    if not cities:
        await message.answer("–í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏–Ω–∞–π–º–Ω—ñ –æ–¥–Ω–µ –º—ñ—Å—Ç–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: –ö–∏—ó–≤, –û—Ö—Ç–∏—Ä–∫–∞, –£–∂–≥–æ—Ä–æ–¥).", reply_markup=main_menu_keyboard())
        return
    set_city(message.from_user.id, ", ".join(cities))  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —è–∫ —Å–ø–∏—Å–æ–∫ —á–µ—Ä–µ–∑ –∫–æ–º—É –∑ –ø—Ä–æ–±—ñ–ª–æ–º
    await message.answer(f"–ú—ñ—Å—Ç–∞ *{', '.join(cities)}* –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –¢–µ–ø–µ—Ä –º–æ–∂–Ω–∞ –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –ø–æ–≥–æ–¥—É.", reply_markup=main_menu_keyboard())
    await state.clear()

@router.message(NotifyTimeState.waiting_for_times)
async def notify_time_input(message: Message, state: FSMContext):
    times_str = message.text.strip()
    times = [t.strip() for t in times_str.split(",")]
    pattern = r"^([0-1]\d|2[0-3]):([0-5]\d)$"
    for time_str in times:
        if not re.match(pattern, time_str):
            await message.answer("–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É. –ö–æ–∂–µ–Ω —á–∞—Å –º–∞—î –±—É—Ç–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ HH:MM (–ø—Ä–∏–∫–ª–∞–¥: 15:00, 18:00).")
            return
    set_notify_times(message.from_user.id, times_str)
    user_id = message.from_user.id
    job_id_base = f"user_{user_id}"
    # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ —Å—Ç–∞—Ä—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    for job_id in scheduler.get_jobs():
        if job_id.id.startswith(job_id_base):
            scheduler.remove_job(job_id.id)
    # –î–æ–¥–∞—î–º–æ –Ω–æ–≤—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
    for time_str in times:
        hour, minute = time_str.split(":")
        job_id = f"{job_id_base}_{time_str.replace(':', '_')}"
        scheduler.add_job(
            send_daily_weather,
            trigger='cron',
            hour=int(hour),
            minute=int(minute),
            args=[message.bot, user_id],
            id=job_id,
            replace_existing=True
        )
    await message.answer(f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {times_str} —â–æ–¥–Ω—è!", reply_markup=main_menu_keyboard())
    await state.clear()